import numpy as np
import pandas as pd
from scipy.optimize import minimize

def equal_weighted_portfolio(returns):
    """
    CrÃ©e un portefeuille Ã©quipondÃ©rÃ©.
    - Retourne un vecteur de poids Ã©gal (somme = 1).
    """
    if not isinstance(returns, pd.DataFrame):
        raise TypeError("ğŸš¨ Erreur : `returns` doit Ãªtre un DataFrame contenant les rendements des actifs du portefeuille.")
    
    n = returns.shape[1]
    weights = np.ones(n) / n  # Poids Ã©gaux

    print(f"âœ… Poids Ã©quipondÃ©rÃ©s calculÃ©s : {weights}")  # Debugging
    return weights

def min_variance_portfolio(returns):
    """
    Optimise un portefeuille Ã  variance minimale.
    - Retourne un vecteur de poids optimisÃ© (somme = 1).
    """
    if not isinstance(returns, pd.DataFrame):
        raise TypeError("ğŸš¨ Erreur : `returns` doit Ãªtre un DataFrame contenant les rendements des actifs du portefeuille.")

    n = returns.shape[1]
    initial_guess = np.ones(n) / n  # Allocation de dÃ©part
    cov_matrix = returns.cov()  # Matrice de covariance

    def portfolio_volatility(weights):
        return np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))  # âˆš(w'Î£w)

    constraints = ({'type': 'eq', 'fun': lambda w: np.sum(w) - 1})  # Somme des poids = 1
    bounds = tuple((0.0, 1.0) for _ in range(n))  # Contraintes sur les poids (0% Ã  100%)

    result = minimize(portfolio_volatility, initial_guess, constraints=constraints, bounds=bounds)
    
    weights = result.x if result.success else initial_guess  # Si optimisation Ã©choue, retourne Ã©quipondÃ©rÃ©
    
    print(f"âœ… Poids MinVariance calculÃ©s : {weights}")  # Debugging
    return weights


def get_portfolio_returns(returns, weights):
    """
    Calcule les rendements du portefeuille pondÃ©rÃ©.
    - Retourne une **Series** reprÃ©sentant les rendements agrÃ©gÃ©s du portefeuille.
    """
    if not isinstance(returns, pd.DataFrame):
        raise TypeError("ğŸš¨ Erreur : `returns` doit Ãªtre un DataFrame contenant les rendements des actifs du portefeuille.")

    if weights is None or len(weights) != returns.shape[1]:
        raise ValueError(f"ğŸš¨ Erreur : Nombre d'actifs ({returns.shape[1]}) â‰  Nombre de poids ({len(weights)})")

    weights = np.array(weights).reshape(-1)  # Assurer un tableau 1D
    return returns.dot(weights)  # Appliquer les poids

