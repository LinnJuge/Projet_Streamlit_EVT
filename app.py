import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.optimize import minimize
import yfinance as yf


def get_data(tickers, start, end):
    """
    R√©cup√®re les prix de cl√¥ture et les rendements log des actifs s√©lectionn√©s.
    - G√®re les cas d'un seul ou plusieurs actifs correctement.
    - V√©rifie et retourne `None, None` si les donn√©es sont vides.
    """
    df = yf.download(tickers, start=start, end=end)["Close"]  # üîπ T√©l√©chargement des prix
    
    if df.empty:
        print("‚ö†Ô∏è Aucune donn√©e r√©cup√©r√©e. V√©rifiez les tickers et la p√©riode s√©lectionn√©e.")
        return None, None

    if isinstance(df, pd.Series):
        df = df.to_frame(name=tickers)  # Convertir en DataFrame avec un nom explicite pour √©viter les erreurs
    
    df.dropna(inplace=True)  # üîπ Suppression des valeurs manquantes
    returns = np.log(df / df.shift(1)).dropna()  # üîπ Calcul des rendements log

    return df, returns  # Retourne les prix et les rendements


def equal_weighted_portfolio(returns):
    """Cr√©e un portefeuille √©quipond√©r√©."""
    n = returns.shape[1]
    return np.ones(n) / n  

def min_variance_portfolio(returns):
    """Optimisation d'un portefeuille √† variance minimale."""
    n = returns.shape[1]
    initial_guess = np.ones(n) / n  
    cov_matrix = returns.cov()

    def portfolio_volatility(weights):
        return np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))

    constraints = ({'type': 'eq', 'fun': lambda w: np.sum(w) - 1})
    bounds = tuple((0.05, 0.95) for _ in range(n))

    result = minimize(portfolio_volatility, initial_guess, constraints=constraints, bounds=bounds)
    return result.x if result.success else initial_guess






























































st.set_page_config(page_title="Dashboard de Risque", layout="wide")

st.sidebar.header("Param√®tres de l'√©tude")
tickers = st.sidebar.multiselect("S√©lectionner un ou plusieurs actifs", ["AAPL", "GOOGL", "MSFT", "SPY"])
mode = st.sidebar.radio("Mode d'analyse", ["Comparaison", "Portefeuille"])

start_date = st.sidebar.date_input("Date de d√©but", pd.to_datetime("2022-01-01"))
end_date = st.sidebar.date_input("Date de fin", pd.to_datetime("2023-12-31"))
confidence = st.sidebar.slider("Niveau de confiance pour la VaR", 0.90, 0.99, 0.95, step=0.01)

if tickers:
    prices, returns = get_data(tickers, start_date, end_date)

    weights = None
    if mode == "Portefeuille":
        allocation_type = st.sidebar.radio("Choix de l'allocation", ["√âquipond√©r√©e", "MinVariance", "D√©finir moi-m√™me"])
        if allocation_type == "√âquipond√©r√©e":
            weights = equal_weighted_portfolio(returns)
        elif allocation_type == "MinVariance":
            weights = min_variance_portfolio(returns)

    portfolio_returns = get_portfolio_returns(returns, weights)

    st.subheader("üìâ Indicateurs de Risque")
    st.write("VaR Param√©trique:", calculate_var(portfolio_returns, confidence))
    st.write("CVaR:", calculate_cvar(portfolio_returns, confidence))

    drawdowns = calculate_drawdown(prices, weights)
    st.line_chart(drawdowns)
